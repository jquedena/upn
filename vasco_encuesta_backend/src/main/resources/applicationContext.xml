<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:batch="http://www.springframework.org/schema/batch"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
    
    <bean id="ldapClientWS" class="com.bbva.ws.service.LDAPClient" />
    <bean id="usuarioAutentificado" class="com.bbva.seguridad.bean.UsuarioAutentificado" scope="session"/>
    <bean id="auditoriaTablaInterceptor" class="com.bbva.seguridad.aop.AuditoriaTablaInterceptor"/>
    
    
    <bean id="jobInstanceDAO" class="com.indra.batch.dao.JobInstanceDAO">
        <property name="jndi" value="${database.jndi}"></property>
        <property name="prefix" value="${database.defaultSchema}"></property>
        <property name="configFile" value="/batchMappingBALSEC.xml"></property>
    </bean>
    
    <bean id="jobInstanceService" class="com.indra.batch.service.JobInstanceService2">
        <property name="jobInstanceDAO" ref="jobInstanceDAO"></property>
    </bean>

    <bean class="com.indra.batch.web.controller.JobInstanceController2" scope="prototype">
        <property name="jobInstanceService" ref="jobInstanceService"></property>
    </bean>
    
    
    <aop:aspectj-autoproxy/>
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/>

    <tx:annotation-driven/>
    <context:annotation-config/>
    <context:component-scan base-package="com.bbva.balsec,com.bbva.quartz,com.bbva.seguridad"/>
    <context:property-placeholder location="classpath:config.properties"/>
    
    <util:properties id="props" location="classpath:config.properties"/>
    
    <bean class="com.indra.web.JacksonConfiguringPostProcessor"/>
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="true"/>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="text/html"/>
        <property name="useJaf" value="false"/>
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html"/>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
            </map>
        </property>
    </bean>
    
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="${database.jndi}"/>
        <property name="resourceRef" value="true"/>
        <property name="lookupOnStartup" value="false"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.sql.DataSource"/>
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration"/>
        <property name="configLocation" value="classpath:hibernate-config.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.default_schema=${database.defaultSchema}
            </value>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- Begin: Scheduler -->
    <bean id="quartzScheduler"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory">
            <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory"/>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="waitForJobsToCompleteOnShutdown" value="false"/>
        <property name="autoStartup" value="true"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?</prop>
                <prop key="org.quartz.jobStore.tablePrefix">${database.defaultSchema}.QRTZ_</prop>
            </props>
        </property>
    </bean>
    <!-- End: Scheduler -->

    <!-- Begin: Batch Context -->
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="transactionManager" ref="platformTransactionManager"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="databaseType" value="oracle"/>
        <property name="tablePrefix" value="${database.defaultSchema}.BATCH_"/>
    </bean>

    <bean id="platformTransactionManager"
          class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <bean id="jobRegistryBeanPostProcessor"
          class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
        <property name="jobRegistry" ref="jobRegistry"/>
    </bean>

    <bean id="jobRegistry"
          class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>

    <bean id="jobExplorer"
          class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="lobHandler" ref="lobHandler"/>
        <property name="tablePrefix" value="${database.defaultSchema}.BATCH_"/>
    </bean>

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>
    
    <bean id="monitoringExecutionListener" class="com.bbva.balsec.batch.MonitorJob">
        <property name="notifiers">
            <list>
                <ref bean="jobMonitoringNotifierImpl"/>
            </list>
        </property>
    </bean>
    <!-- End: Batch Context -->
    
     <!-- In Memory -->
   <!-- 
   <bean id="jobRepositoryMemory" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
       <property name="transactionManager" ref="transactionManager" />
   </bean>

   <bean id="jobLauncherMemory" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
       <property name="jobRepository" ref="jobRepositoryMemory" />
   </bean> -->
   <!-- In Memory -->
</beans>
